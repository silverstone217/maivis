// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   
  access_token       String?   
  expires_at         Int?
  scope              String?
  id_token           String? 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String    @map("session_token") @unique
  accessToken  String?   @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  role          String @default("user")
  tel           String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[] @relation("user")
  raters        Rating[] @relation("rater")
  ratings       Rating[] @relation("rated")
  jobber        Jobber?
}

model Jobber{
  id            String   @id @default(cuid())
  images        String[]
  description   String?
  salary        String
  typeSalary    String @default("monthly")
  transportFees String?
  address       String
  isAvailable   Boolean @default(true)
  job           String
  paimentOption String @default("mobile")
  paimentMoment String @default("before")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  booking       Booking[] @relation("jobber")
  userId        String @unique
  user          User      @relation( fields: [userId], references: [id], onDelete: Cascade)
 
}


model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Booking{
  id              String   @id @default(cuid())
  address         String
  fees            String?
  paimentOption   String @default("mpesa")
  paimentMoment   String @default("before")
  status          String @default("en attente")
  description     String 
  reservationDate DateTime
  isViewed        Boolean @default(false)
  userId          String
  user            User      @relation("user", fields: [userId], references: [id], onDelete: NoAction)
  jobberId        String
  jobber          Jobber      @relation("jobber", fields: [jobberId], references: [id], onDelete: NoAction)
  ratings         Rating?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Rating {
  id             String   @id @default(cuid())
  rate           Int   @default(3)
  raterId        String
  ratedId        String
  bookingId      String @unique
  rater          User      @relation("rater", fields: [raterId], references: [id], onDelete: NoAction)
  rated          User      @relation("rated", fields: [ratedId], references: [id], onDelete: NoAction)
  booking        Booking   @relation(fields: [bookingId], references: [id], onDelete: NoAction)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}